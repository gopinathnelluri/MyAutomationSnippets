Add-Type -AssemblyName PresentationFramework

# Array of strings for the sidebar items
$sideBarItems = @(
    "Sidebar Item 3",
    "Sidebar Item 1",
    "Sidebar Item 2"
)

# Sort the sidebar items in ascending order
$sideBarItems = $sideBarItems | Sort-Object

# Array of strings for the tabs
$tabItems = @(
    "Tab 1",
    "Tab 2",
    "Tab 3"
)

# Create the main window
$mainWindow = New-Object System.Windows.Window
$mainWindow.Title = "Sidebar Tabs Demo"
$mainWindow.Width = 800
$mainWindow.Height = 600

# Create the main panel
$mainPanel = New-Object System.Windows.Controls.DockPanel

# Create the sidebar
$sidebar = New-Object System.Windows.Controls.ListBox
$sidebar.Width = 200
$sidebar.ItemsSource = $sideBarItems

# Create a tab control for displaying the content
$tabControl = New-Object System.Windows.Controls.TabControl

# Add the sidebar and tab control to the main panel
[System.Windows.Controls.DockPanel]::SetDock($sidebar, "Left")
[System.Windows.Controls.DockPanel]::SetDock($tabControl, "Right")
$mainPanel.Children.Add($sidebar)
$mainPanel.Children.Add($tabControl)

# Add some sample tabs to the tab control
foreach ($tabItemText in $tabItems) {
    $tabItem = New-Object System.Windows.Controls.TabItem
    $tabItem.Header = $tabItemText
    $tabControl.Items.Add($tabItem)

    $tabContent = New-Object System.Windows.Controls.TextBlock
    $tabItem.Content = $tabContent
}

# Register the event handler for the selection changed event of the sidebar
$sidebar.Add_SelectionChanged({
    $selectedSidebarItem = $sideBarItems[$sidebar.SelectedIndex]
    $selectedTabItem = $tabControl.SelectedItem

    # Find the selected tab item and its corresponding text block
    $tabContent = $selectedTabItem.Content

    # Update the text block content with the selected sidebar item and tab item names
    $tabContent.Text = "Selected Sidebar Item: $selectedSidebarItem`nSelected Tab Item: $($selectedTabItem.Header)"
})

# Set the main panel as the content of the main window
$mainWindow.Content = $mainPanel

# Show the main window
$mainWindow.ShowDialog()

function GetMatchingFilesInSubfolders {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Directory,

        [Parameter(Mandatory = $true)]
        [string[]]$SidebarItems
    )

    # Create an empty list to store the matching file paths
    $matchingFiles = @()

    # Get all files recursively in the specified directory
    $allFiles = Get-ChildItem -Path $Directory -File -Recurse

    foreach ($file in $allFiles) {
        # Check if any of the sidebar items is a substring of the file name
        foreach ($sidebarItem in $SidebarItems) {
            if ($file.Name -like "*$sidebarItem*") {
                $matchingFiles += $file.FullName
                break
            }
        }
    }

    # Return the list of matching file paths
    return $matchingFiles
}


$directoryPath = "C:\Path\To\Directory"
$matchingFiles = GetMatchingFilesInSubfolders -Directory $directoryPath -SidebarItems $sideBarItems

# Display the matching file paths
$matchingFiles

